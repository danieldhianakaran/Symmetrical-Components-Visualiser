<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vector Sequence Breakdown</title>
    <style>
        * {
            font-family: Arial, sans-serif;
            margin: 10px;
        }
        .input-group {
            display: flex;
            gap: 20px;
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <h1>Vector Sequence Breakdown</h1>
    <div class="input-group">
        <label>Vector 1: </label>
        <input type="number" id="mag1" placeholder="Magnitude">
        <input type="number" id="angle1" placeholder="Angle (degrees)">
    </div>
    <div class="input-group">
        <label>Vector 2: </label>
        <input type="number" id="mag2" placeholder="Magnitude">
        <input type="number" id="angle2" placeholder="Angle (degrees)">
    </div>
<div class="input-group"><label>
<input type="number" id="mag3" placeholder="Magnitude"><input type="number" id="angle3" placeholder="Angle (degrees)">
<button onclick="drawVectors()">
<svg id="vectorCanvas" width="500" height="500">
<script>
    function drawVectors() {
        const svg = document.getElementById('vectorCanvas');
        svg.innerHTML = ''; // Clear previous drawings

        const mag1 = parseFloat(document.getElementById('mag1').value);
        const angle1 = parseFloat(document.getElementById('angle1').value) * Math.PI / 180;
        const mag2 = parseFloat(document.getElementById('mag2').value);
        const angle2 = parseFloat(document.getElementById('angle2').value) * Math.PI / 180;
        const mag3 = parseFloat(document.getElementById('mag3').value);
        const angle3 = parseFloat(document.getElementById('angle3').value) * Math.PI / 180;

        const origin = { x: 250, y: 250 };

        function drawVector(x, y, color) {
            const line = document.createElementNS("http://www.w3.org/2000/svg", "line");
            line.setAttribute("x1", origin.x);
            line.setAttribute("y1", origin.y);
            line.setAttribute("x2", origin.x + x);
            line.setAttribute("y2", origin.y + y);
            line.setAttribute("stroke", color);
            line.setAttribute("stroke-width", 2);
            svg.appendChild(line);
        }

        // Draw input vectors
        drawVector(mag1 * Math.cos(angle1), -mag1 * Math.sin(angle1), 'black');
        drawVector(mag2 * Math.cos(angle2), -mag2 * Math.sin(angle2), 'black');
        drawVector(mag3 * Math.cos(angle3), -mag3 * Math.sin(angle3), 'black');

        // Calculate and draw positive sequence vectors
        const positiveSequence = [
            (mag1 * Math.cos(angle1) + mag2 * Math.cos(angle2) + mag3 * Math.cos(angle3)) / 3,
            -(mag1 * Math.sin(angle1) + mag2 * Math.sin(angle2) + mag3 * Math.sin(angle3)) / 3
        ];
        drawVector(positiveSequence[0], positiveSequence[1], 'red');

        // Calculate and draw negative sequence vectors
        const negativeSequence = [
            (mag1 * Math.cos(angle1 + 2 * Math.PI / 3) + mag2 * Math.cos(angle2 + 2 * Math.PI / 3) + mag3 * Math.cos(angle3 + 2 * Math.PI / 3)) / 3,
            -(mag1 * Math.sin(angle1 + 2 * Math.PI / 3) + mag2 * Math.sin(angle2 + 2 * Math.PI / 3) + mag3 * Math.sin(angle3 + 2 * Math.PI / 3)) / 3
        ];
        drawVector(positiveSequence[0] + negativeSequence[0], positiveSequence[1] + negativeSequence[1], 'green');

        // Calculate and draw zero sequence vectors
        const zeroSequence = [
            (mag1 * Math.cos(angle1 + 4 * Math.PI / 3) + mag2 * Math.cos(angle2 + 4 * Math.PI / 3) + mag3 * Math.cos(angle3 + 4 * Math.PI / 3)) / 3,
            -(mag1 * Math.sin(angle1 + 4 * Math.PI / 3) + mag2 * Math.sin(angle2 + 4 * Math.PI / 3) + mag3 * Math.sin(angle3 + 4 * Math.PI / 3)) / 3
        ];
        drawVector(positiveSequence[0] + negativeSequence[0] + zeroSequence[0], positiveSequence[1] + negativeSequence[1] + zeroSequence[1], 'blue');
    }
</script>
